{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["API_HOST","API_KEY","locations","waterloo","toronto","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleLocation","location","state","udpateWeather","setState","loading","fetch","concat","then","response","json","responseJSON","temperature","main","temp","catch","err","_this2","_this$state","react_default","a","createElement","className","src","alt","type","onClick","Component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAGMA,SAAW,sDACXC,EAAU,mCAGVC,EAAY,CACjBC,SAAU,QACVC,QAAS,SAsFKC,cAjFd,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAYPQ,eAAiB,WAAM,IACdC,EAAaR,EAAKS,MAAlBD,SAEJA,IAAab,EAAUC,SAC1BI,EAAKU,cAAef,EAAUE,SAEtBW,IAAab,EAAUE,SAC/BG,EAAKU,cAAef,EAAUC,WApBbI,EAuBnBU,cAAgB,SAAEF,GACjBR,EAAKW,SAAS,CAAEH,WAAUI,SAAS,IAEnCC,MAAK,GAAAC,OAAIrB,GAAJqB,OAAeN,EAAf,WAAAM,OAAiCpB,EAAjC,kBACHqB,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SACzBF,KAAK,SAAAG,GACLlB,EAAKW,SAAS,CACbQ,YAAW,GAAAL,OAAKI,EAAaE,KAAKC,KAAvB,SACXT,SAAS,MAETU,MAAM,SAAAC,GACNvB,EAAKW,SAAS,CACbQ,YAAa,qBACbP,SAAS,OAlCdZ,EAAKS,MAAQ,CACZD,SAAUb,EAAUC,SACpBgB,SAAS,EACTO,YAAa,IALInB,mFAUlBG,KAAKO,cAAcP,KAAKM,MAAMD,2CA+BtB,IAAAgB,EAAArB,KAAAsB,EACmCtB,KAAKM,MAAxCD,EADAiB,EACAjB,SAAUW,EADVM,EACUN,YAAaP,EADvBa,EACuBb,QAE/B,OACCc,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACdH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,2DAA2DC,IAAI,QAAQF,UAAU,SAC1FH,EAAAC,EAAAC,cAAA,sBAGDF,EAAAC,EAAAC,cAAA,SAAIpB,IAAab,EAAUC,SAAW,WAAa,WAEnD8B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACdH,EAAAC,EAAAC,cAAA,SACCI,KAAK,QACLF,IAAI,8EACJD,UAAU,UACVI,QAAS,kBAAMT,EAAKd,cAAcF,IAClCuB,IAAI,YAELL,EAAAC,EAAAC,cAAA,SAAIT,IAGHP,EACDc,EAAAC,EAAAC,cAAA,OACCE,IAAI,0FACJC,IAAI,UACJF,UAAU,YAJAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAO3BH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,MAAMI,QAAS9B,KAAKI,gBACpCC,IAAab,EAAUC,SAAW,UAAY,oBA3ElCsC,aCAEC,QACW,cAA7BC,OAAO5B,SAAS6B,UAEe,UAA7BD,OAAO5B,SAAS6B,UAEhBD,OAAO5B,SAAS6B,SAASC,MACvB,2DCZNC,IAASC,OAAOd,EAAAC,EAAAC,cAACa,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaC","file":"static/js/main.472037eb.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nconst API_HOST = 'http://api.openweathermap.org/data/2.5/weather?id=';\nconst API_KEY = \"6827a24a0b42d1794c35b2628a529dc8\";\n\n// ID's pulled from city.list.json.gz on http://bulk.openweathermap.org/sample/\nconst locations = {\n\twaterloo: 6176823,\n\ttoronto: 6087824\n}\n\nclass App extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = { \n\t\t\tlocation: locations.waterloo,\n\t\t\tloading: false,\n\t\t\ttemperature: \"\"\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.udpateWeather(this.state.location);\n\t}\n\n\ttoggleLocation = () => {\n\t\tconst { location } = this.state;\n\n\t\tif (location === locations.waterloo)\n\t\t\tthis.udpateWeather( locations.toronto );\n\n\t\telse if (location === locations.toronto)\n\t\t\tthis.udpateWeather( locations.waterloo );\n\t}\n\n\tudpateWeather = ( location ) => {\n\t\tthis.setState({ location, loading: true });\n\n\t\tfetch(`${API_HOST}${location}&APPID=${API_KEY}&units=metric`)\n\t\t\t.then(response => response.json())\n\t\t\t\t.then(responseJSON => {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\ttemperature: `${responseJSON.main.temp}Â°C`,\n\t\t\t\t\t\tloading: false\n\t\t\t\t\t})})\n\t\t\t\t\t.catch(err => {\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\ttemperature: \"Could not connect.\",\n\t\t\t\t\t\t\tloading: false\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t}\n\n\trender() {\n\t\tconst { location, temperature, loading } = this.state;\n\n\t\treturn (\n\t\t\t<div className=\"App\">\n\n\t\t\t\t<div className=\"header\">\n\t\t\t\t\t<img src=\"http://hddfhm.com/images/animated-clipart-weather-15.png\" alt=\"cloud\" className=\"logo\"/>\n\t\t\t\t\t<h1>Weather</h1>\n\t\t\t\t</div>\n\n\t\t\t\t<p>{location === locations.waterloo ? \"WATERLOO\" : \"TORONTO\"}</p>\n\n\t\t\t\t<div className=\"tempContainer\">\n\t\t\t\t\t<input \n\t\t\t\t\t\ttype=\"image\" \n\t\t\t\t\t\tsrc=\"https://www.materialui.co/materialIcons/navigation/refresh_grey_192x192.png\"\n\t\t\t\t\t\tclassName=\"refresh\"\n\t\t\t\t\t\tonClick={() => this.udpateWeather(location)}\n\t\t\t\t\t\talt=\"refresh\"/>\n\n\t\t\t\t\t<p>{temperature}</p>\n\t\t\t\t</div>\n\n\t\t\t\t{!loading ? <div className=\"loading\"/> :\n\t\t\t\t\t<img \n\t\t\t\t\t\tsrc=\"https://mir-s3-cdn-cf.behance.net/project_modules/disp/35771931234507.564a1d2403b3a.gif\"\n\t\t\t\t\t\talt=\"loading\"\n\t\t\t\t\t\tclassName=\"loading\"/>\n\t\t\t\t}\n\n\t\t\t\t<button className=\"btn\" onClick={this.toggleLocation}>\n\t\t\t\t\t{location === locations.waterloo ? \"Toronto\" : \"Waterloo\"}\n\t\t\t\t</button>\n\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}